version: 2.1

parameters:
  terraform_version:
    default: "1.3.7"
    type: string
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""

orbs:
  terraform: circleci/terraform@3.2.0

commands:
  test_terraform:
    steps:
      - run:
          name: Configure test cluster env
          command: |
            echo export TF_VAR_deploy_id=\"${WORKSPACE}\" >> $BASH_ENV
            echo 'export TF_VAR_tags=\{\"CIRCLE_BUILD_URL\"=\"${CIRCLE_BUILD_URL}\",\"CIRCLE_PR_NUMBER\"=\"${CIRCLE_PR_NUMBER}\",\"CIRCLE_PULL_REQUEST\"=\"${CIRCLE_PULL_REQUEST}\",\"CIRCLE_REPOSITORY_URL\"=\"${CIRCLE_REPOSITORY_URL}\"\}' >> $BASH_ENV
      - run:
          name: Test Terraform
          working_directory: tests
          command: |
            ssh-keygen -q -P '' -t rsa -b 4096 -m PEM -f domino.pem
            terraform init
            terraform validate
            terraform workspace new ${WORKSPACE}
            terraform apply -auto-approve
            # we will always have drift
            # terraform plan -detailed-exitcode

  destroy_terraform:
    steps:
      - run:
          name: Terraform destroy
          working_directory: tests
          command: |
            terraform destroy --auto-approve || terraform destroy --auto-approve --refresh=false
          when: always

  delete_workspace:
    steps:
      - run:
          name: Terraform workspace delete
          working_directory: tests
          command: |
            terraform workspace select default
            terraform workspace delete ${WORKSPACE}

jobs:
  test-deploy:
    docker:
      - image: cimg/aws:2022.11.1
    parameters:
      workspace:
        type: string
        default: circleci-<< pipeline.number >>
      terraform_version:
        type: string
    environment:
      WORKSPACE: << parameters.workspace >>

    steps:
      - checkout
      - terraform/install:
          terraform_version: <<parameters.terraform_version>>
      - test_terraform
      - destroy_terraform
      - delete_workspace

  test-upgrade:
    docker:
      - image: cimg/aws:2022.11.1
    parameters:
      workspace:
        type: string
        default: circleci-<< pipeline.number >>
      terraform_version:
        type: string
    environment:
      WORKSPACE: << parameters.workspace >>
    steps:
      - checkout
      - terraform/install:
          terraform_version: <<parameters.terraform_version>>
      - run:
          name: "Provision using latest published release"
          working_directory: tests
          command: |
            latest_release_commit="$(git rev-list --tags --max-count=1)"
            latest_release_tag="$(git describe --tags ${latest_release_commit})"
            export MOD_SOURCE="github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git?ref=${latest_release_tag}"
            echo "Latest published release tag is: ${latest_release_tag}"
            echo "Setting module source to: ${MOD_SOURCE}"
            cat \<<< $(jq --arg mod_source "${MOD_SOURCE}" '.module[0].domino_eks.source = $mod_source' main.tf.json) >main.tf.json
      - test_terraform
      - run:
          name: "Upgrade module by applying this commit"
          working_directory: tests
          command: |
            echo "Testing terraform module upgrade"
            export MOD_SOURCE="./.."
            echo "Setting module source to local ref: ${MOD_SOURCE}"
            cat \<<< $(jq --arg mod_source "${MOD_SOURCE}" '.module[0].domino_eks.source = $mod_source' main.tf.json) >main.tf.json
            terraform init --reconfigure --upgrade
            terraform validate
            terraform apply --auto-approve
      - destroy_terraform
      - delete_workspace

workflows:
  test-deploy-workflow:
    when:
      equal: ["test-deploy-workflow", << pipeline.parameters.GHA_Action >> ]
    jobs:
      - test-deploy:
          terraform_version: << pipeline.parameters.terraform_version >>
  test-upgrade-workflow:
    when:
      equal: ["test-upgrade-workflow", << pipeline.parameters.GHA_Action >> ]
    jobs:
      - test-upgrade:
          terraform_version: << pipeline.parameters.terraform_version >>

version: 2.1

parameters:
  helm_version:
    type: string
    default: "v3.11.2"
  terraform_version:
    type: string
    default: "1.4.4"
  hcledit_version:
    type: string
    default: "0.2.9"
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""

orbs:
  terraform: circleci/terraform@3.2.0
  aws-cli: circleci/aws-cli@3.1
  envsubst: sawadashota/envsubst@1.1.0

commands:
  install_tf:
    description: "Install Terraform"
    parameters:
      terraform_version:
        type: string
    steps:
      - terraform/install:
          terraform_version: << parameters.terraform_version >>
  install_hcledit:
    description: "Install HCL edit"
    parameters:
      hcledit_version:
        type: string
        default: "0.2.9"
    steps:
      - run:
          name: Install HCL edit
          working_directory: tests/deploy
          environment:
            HCLEDIT_VERSION: << parameters.hcledit_version >>
          command: bash ci-deploy.sh install_hcledit
  set_mod_source_current:
    description: "Set up module source to current branch."
    steps:
      - run:
          name: "Set module source to current branch"
          working_directory: tests/deploy
          command: bash ci-deploy.sh set_mod_src_circle_branch
  set_mod_source_latest_rel:
    description: "Set up module source to current branch."
    steps:
      - run:
          name: "Set module source to latest published release"
          working_directory: tests/deploy
          command: bash ci-deploy.sh set_mod_src_latest_rel
  set_aws_creds:
    description: "Sets short-lived creds"
    steps:
      - aws-cli/setup:
          role-arn: "${AWS_IAM_ROLE}"
          session-duration: "900"
  set_tf_vars:
    description: "Sets Terraform variables"
    steps:
      - envsubst/install
      - install_hcledit
      - set_aws_creds
      - run:
          name: Bootstrap terraform module/vars.
          working_directory: tests/deploy
          command: |
            bash ci-deploy.sh setup_modules
            bash ci-deploy.sh set_tf_vars
  install_helm:
    description: "Install Helm"
    parameters:
      helm_version:
        type: string
    steps:
      - run:
          name: Install Helm
          working_directory: tests/deploy
          environment:
            HELM_VERSION: << parameters.helm_version >>
          command: bash ci-deploy.sh install_helm
  tf_init_apply:
    description: "Terraform init"
    steps:
      - run:
          name: Terraform init/validate/apply
          working_directory: tests/deploy
          command: |
            ## Most of this verbiage will go away after release.
            set -e
            echo "Current dir: $PWD"

            if [ -f "migrated.txt" ]; then
              echo "This legacy deployment has been migrated"
              bash ci-deploy.sh deploy
            elif [ -n "$MAJOR_MOD_VERSION" ] && (( $MAJOR_MOD_VERSION < 3 )) ; then

              source "${PWD}/meta.sh"
              echo "CI determined this is a legacy deploy."

              echo "Generating Deployment pvt key."
              export LEGACY_PVT_KEY="${LEGACY_DIR}/domino.pem"
              envsubst < "${LEGACY_DIR}/ci.tfvars.tftpl" | tee "${LEGACY_DIR}/terraform.tfvars"
              ssh-keygen -q -P '' -t rsa -b 4096 -m PEM -f "$LEGACY_PVT_KEY"

              echo "Running legacy monolithic deploy"
              terraform -chdir="$LEGACY_DIR" init
              terraform -chdir="$LEGACY_DIR" validate
              terraform -chdir="$LEGACY_DIR" apply --auto-approve --input=false

              echo "Running state migration on CI."
              bash -xp ../../bin/state-migration/migrate-states.sh
            else
              echo "Running ci-deploy.sh deploy"
              bash ci-deploy.sh deploy
            fi
  tf_deploy_single_node:
    description: "Terraform deploy single-node"
    steps:
      - run:
          name: "Setup single-node module"
          working_directory: tests/deploy
          command: bash ci-deploy.sh setup_single_node_tf
      - run:
          name: "Deploy single-node"
          working_directory: tests/deploy
          command: bash ci-deploy.sh deploy_single_node
  tf_destroy_single_node:
    description: "Terraform destroy single-node"
    steps:
      - run:
          name: "Destroy single-node"
          working_directory: tests/deploy
          command: bash ci-deploy.sh destroy_single_node
  tf_deploy:
    description: "Terraform deploy"
    steps:
      - aws-cli/setup:
          role-arn: "${AWS_IAM_ROLE}"
          session-duration: "43200"
      - tf_init_apply
  tf_destroy:
    description: "Terraform destroy"
    steps:
      - run:
          name: Terraform destroy
          working_directory: tests/deploy
          command: bash ci-deploy.sh destroy
          when: always
  tf_plan_test:
    steps:
      - set_aws_creds
      - run:
          name: Terraform plan test
          working_directory: tests/plan
          command: bash tf-plan-test.sh
jobs:
  tf-plan-test:
    docker:
      - image: cimg/aws:2023.04.1
    parameters:
      terraform_version:
        type: string
    steps:
      - checkout
      - install_tf:
          terraform_version: << parameters.terraform_version >>
      - tf_plan_test
  test-deploy:
    docker:
      - image: cimg/aws:2023.04.1
    parameters:
      terraform_version:
        type: string
      helm_version:
        type: string
    steps:
      - checkout
      - install_tf:
          terraform_version: << parameters.terraform_version >>
      - install_helm:
          helm_version: << parameters.helm_version >>
      - set_tf_vars
      - set_mod_source_current
      - tf_deploy
      - tf_deploy_single_node
      - tf_destroy_single_node
      - tf_destroy
  test-upgrade:
    docker:
      - image: cimg/aws:2023.04.1
    parameters:
      terraform_version:
        type: string
      helm_version:
        type: string
      hcledit_version:
        type: string
    steps:
      - checkout
      - install_tf:
          terraform_version: << parameters.terraform_version >>
      - install_helm:
          helm_version: << parameters.helm_version >>
      - set_tf_vars
      - set_mod_source_latest_rel
      - tf_deploy
      - set_mod_source_current
      - tf_init_apply
      - tf_destroy

workflows:
  test-deploy-workflow:
    when:
      equal: ["test-deploy-workflow", << pipeline.parameters.GHA_Action >>]
    jobs:
      - test-deploy:
          context: aws-oidc
          terraform_version: << pipeline.parameters.terraform_version >>
          helm_version: << pipeline.parameters.helm_version >>
  test-upgrade-workflow:
    when:
      equal: ["test-upgrade-workflow", << pipeline.parameters.GHA_Action >>]
    jobs:
      - test-upgrade:
          context: aws-oidc
          terraform_version: << pipeline.parameters.terraform_version >>
          helm_version: << pipeline.parameters.helm_version >>
          hcledit_version: << pipeline.parameters.hcledit_version >>
  examples-plan-test-workflow:
    when:
      equal:
        ["examples-plan-test-workflow", << pipeline.parameters.GHA_Action >>]
    jobs:
      - tf-plan-test:
          context: aws-oidc
          terraform_version: << pipeline.parameters.terraform_version >>

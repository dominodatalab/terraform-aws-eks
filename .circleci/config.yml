version: 2.1

parameters:
  helm_version:
    default: "v3.10.0"
    type: string
  terraform_version:
    default: "1.3.7"
    type: string
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""

orbs:
  terraform: circleci/terraform@3.2.0
  aws-cli: circleci/aws-cli@3.1
  envsubst: sawadashota/envsubst@1.1.0

commands:
  set_tf_vars:
    steps:
      - run:
          name: Configure terraform vars
          working_directory: tests
          command: |
            envsubst < ci.tfvars.tftpl | tee terraform.tfvars
  install_tf:
    parameters:
      terraform_version:
        type: string
        default: << pipeline.parameters.terraform_version >>
    steps:
      - terraform/install:
          terraform_version: << parameters.terraform_version >>
  gen_pvt_key:
    steps:
      - run:
          name: Generate pvt key
          command: ssh-keygen -q -P '' -t rsa -b 4096 -m PEM -f tests/domino.pem
  tf_init_apply:
    steps:
      - aws-cli/setup:
         role-arn: "${AWS_IAM_ROLE}"
         session-duration: "43200"
      - run:
          name: Terraform init/validate/apply
          working_directory: tests
          command: |
            echo "Current dir: $(pwd)"
            terraform init
            terraform validate
            terraform workspace new ${WORKSPACE}
            terraform apply -auto-approve
  tf_destroy:
    steps:
      - run:
          name: Terraform destroy
          working_directory: tests
          command: |
            echo "Current dir: $(pwd)"
            terraform destroy --auto-approve || terraform destroy --auto-approve --refresh=false
          when: always
  tf_ws_delete:
    steps:
      - run:
          name: Terraform workspace delete
          working_directory: tests
          command: |
            echo "Current dir: $(pwd)"
            terraform workspace select default
            terraform workspace delete ${WORKSPACE}
          when: always
  install_helm:
    parameters:
      helm_version:
        type: string
        default: << pipeline.parameters.helm_version >>
    description: "Install Helm"
    steps:
      - run:
          name: Install Helm
          environment:
            HELM_VERSION: << parameters.helm_version >>
          command: |
            if [ -z "$HELM_VERSION" ]; then
              echo "HELM_VERSION environment variable not set, exiting."
              exit 1
            fi
            echo "Installing Helm version: ${HELM_VERSION}"
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod +x get_helm.sh
            ./get_helm.sh --version "${HELM_VERSION}"
            rm ./get_helm.sh
            helm version --short
jobs:
  test-deploy:
    docker:
      - image: cimg/aws:2022.11.1
    parameters:
      workspace:
        type: string
        default: circleci-<< pipeline.number >>
      terraform_version:
        type: string
      helm_version:
        type: string
    environment:
      WORKSPACE: << parameters.workspace >>
    steps:
      - checkout
      - install_tf
      - install_helm
      - envsubst/install
      - set_tf_vars
      - gen_pvt_key
      - tf_init_apply
      - tf_destroy
      - tf_ws_delete
  test-upgrade:
    docker:
      - image: cimg/aws:2022.11.1
    parameters:
      workspace:
        type: string
        default: circleci-<< pipeline.number >>
      terraform_version:
        type: string
      helm_version:
        type: string
    environment:
      WORKSPACE: << parameters.workspace >>
    steps:
      - checkout
      - install_tf
      - install_helm
      - envsubst/install
      - set_tf_vars
      - gen_pvt_key
      - run:
          name: "Set module source to latest published release"
          working_directory: tests
          command: |
            latest_release_commit="$(git rev-list --tags --max-count=1)"
            latest_release_tag="$(git describe --tags ${latest_release_commit})"
            export MOD_SOURCE="github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git?ref=${latest_release_tag}"
            echo "Latest published release tag is: ${latest_release_tag}"
            echo "Setting module source to: ${MOD_SOURCE}"
            cat \<<< $(jq --arg mod_source "${MOD_SOURCE}" '.module[0].domino_eks.source = $mod_source' main.tf.json) >main.tf.json
      - tf_init_apply
      - run:
          name: "Upgrade module by applying this commit"
          working_directory: tests
          command: |
            echo "Testing terraform module upgrade"
            export MOD_SOURCE="./.."
            echo "Setting module source to local ref: ${MOD_SOURCE}"
            cat \<<< $(jq --arg mod_source "${MOD_SOURCE}" '.module[0].domino_eks.source = $mod_source' main.tf.json) >main.tf.json
            terraform init --reconfigure --upgrade
            terraform validate
            terraform apply --auto-approve
      - tf_destroy
      - tf_ws_delete

workflows:
  test-deploy-workflow:
    when:
      equal: ["test-deploy-workflow", << pipeline.parameters.GHA_Action >> ]
    jobs:
      - test-deploy:
          context: aws-oidc
          terraform_version: << pipeline.parameters.terraform_version >>
          helm_version: << pipeline.parameters.helm_version >>
  test-upgrade-workflow:
    when:
      equal: ["test-upgrade-workflow", << pipeline.parameters.GHA_Action >> ]
    jobs:
      - test-upgrade:
          context: aws-oidc
          terraform_version: << pipeline.parameters.terraform_version >>
          helm_version: << pipeline.parameters.helm_version >>
